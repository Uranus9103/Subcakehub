-- APEX_Loader (PLACE THIS SCRIPT IN ServerScriptService)
-- Single-file: server (DataStore + RemoteFunctions) + auto-create client LocalScript (UI + features)
-- EDIT the LINKS table below to your 12 get-key links BEFORE use.

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local HttpService = game:GetService("HttpService")

-- ========== CONFIG ==========
local DATASTORE_NAME = "APEX_HUB_KEYS_FINAL_v1"

-- Put your 12 get-key links here (replace placeholders)
local LINKS = {
	"https://your-link-1.example",
	"https://your-link-2.example",
	"https://your-link-3.example",
	"https://your-link-4.example",
	"https://your-link-5.example",
	"https://your-link-6.example",
	"https://your-link-7.example",
	"https://your-link-8.example",
	"https://your-link-9.example",
	"https://your-link-10.example",
	"https://your-link-11.example",
	"https://your-link-12.example",
}

-- 12 rotating keys (fixed codes)
local ROTATING_KEYS = {
	"APEXKEY1","APEXKEY2","APEXKEY3","APEXKEY4",
	"APEXKEY5","APEXKEY6","APEXKEY7","APEXKEY8",
	"APEXKEY9","APEXKEY10","APEXKEY11","APEXKEY12",
}
-- ============================

local DS = DataStoreService:GetDataStore(DATASTORE_NAME)

-- Ensure RemoteFunctions
local function ensureRemote(name)
	local rf = ReplicatedStorage:FindFirstChild(name)
	if not rf then
		rf = Instance.new("RemoteFunction")
		rf.Name = name
		rf.Parent = ReplicatedStorage
	end
	return rf
end

local rfGetStatus = ensureRemote("APEX_GetKeyStatus")   -- returns true if user has valid key for current dayIndex
local rfSubmitKey = ensureRemote("APEX_SubmitKey")     -- server checks key, saves if ok
local rfGetLinks = ensureRemote("APEX_GetLinks")       -- returns LINKS and current index

-- Helpers: key index by UTC day number
local function getCurrentDayIndex()
	return math.floor(os.time() / 86400)
end
local function getCurrentKeyIndex()
	local dayIndex = getCurrentDayIndex()
	return (dayIndex % #ROTATING_KEYS) + 1, dayIndex
end
local function getActiveKey()
	local idx, dayIndex = getCurrentKeyIndex()
	return ROTATING_KEYS[idx], idx, dayIndex
end

-- Server RemoteFunction implementations
rfGetStatus.OnServerInvoke = function(player)
	local _, dayIndex = getCurrentKeyIndex()
	local ok, saved = pcall(function()
		return DS:GetAsync("apex_key:" .. player.UserId)
	end)
	if ok and saved and type(saved) == "table" and saved.lastValidDayIndex == dayIndex then
		return true
	end
	return false
end

rfSubmitKey.OnServerInvoke = function(player, keyText)
	if type(keyText) ~= "string" then
		return false, "Key kh√¥ng h·ª£p l·ªá."
	end
	local activeKey, idx, dayIndex = getActiveKey()
	if keyText == activeKey then
		local ok, err = pcall(function()
			return DS:SetAsync("apex_key:" .. player.UserId, { lastValidDayIndex = dayIndex })
		end)
		if ok then
			return true, "X√°c th·ª±c th√†nh c√¥ng!"
		else
			warn("[APEX] DataStore SetAsync error:", err)
			return false, "L·ªói l∆∞u d·ªØ li·ªáu. Th·ª≠ l·∫°i sau."
		end
	else
		return false, "Sai key! M·ªói 24h key s·∫Ω ƒë·ªïi."
	end
end

rfGetLinks.OnServerInvoke = function(player)
	local idx = select(1, getCurrentKeyIndex()) -- returns index
	return LINKS, idx
end

-- Client LocalScript source (injected). It uses a rainbow border effect (HSV cycling).
local clientTemplate = [[
-- APEX_Client (auto-generated). Will be cloned to each player's PlayerGui.
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

local rfGetStatus = ReplicatedStorage:WaitForChild("APEX_GetKeyStatus")
local rfSubmitKey = ReplicatedStorage:WaitForChild("APEX_SubmitKey")
local rfGetLinks = ReplicatedStorage:WaitForChild("APEX_GetLinks")

-- Injected constants
local LINKS = __LINKS_JSON__
local ROTATING_KEYS = __KEYS_JSON__

-- HSV -> RGB
local function hsv(h, s, v)
	local r, g, b = 0,0,0
	local i = math.floor(h * 6)
	local f = h * 6 - i
	local p = v * (1 - s)
	local q = v * (1 - f * s)
	local t = v * (1 - (1 - f) * s)
	i = i % 6
	if i == 0 then r, g, b = v, t, p
	elseif i == 1 then r, g, b = q, v, p
	elseif i == 2 then r, g, b = p, v, t
	elseif i == 3 then r, g, b = p, q, v
	elseif i == 4 then r, g, b = t, p, v
	elseif i == 5 then r, g, b = v, p, q
	end
	return Color3.new(r,g,b)
end

-- UI helpers
local function new(parent, class, props)
	local inst = Instance.new(class)
	for k,v in pairs(props or {}) do inst[k] = v end
	inst.Parent = parent
	return inst
end
local function addCorner(inst, r) local c = Instance.new("UICorner", inst); c.CornerRadius = UDim.new(0, r or 12) end
local function addStroke(inst) local s = Instance.new("UIStroke", inst); s.Thickness = 2; s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; s.Color = Color3.fromRGB(255,255,255); return s end
local function addGradient(inst, c1, c2) local g = Instance.new("UIGradient", inst); g.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,c1), ColorSequenceKeypoint.new(1,c2)}; g.Rotation = 90; return g end

-- Root
local gui = Instance.new("ScreenGui")
gui.Name = "APEX_HUB_GUI"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = player:WaitForChild("PlayerGui")

-- Rainbow stroke updater (applies to frames passed in)
local rainbowTargets = {}
local hue = math.random() * 1.0
RunService.RenderStepped:Connect(function(dt)
	hue = (hue + dt * 0.08) % 1
	local c = hsv(hue, 0.95, 0.95)
	for _, stroke in ipairs(rainbowTargets) do
		if stroke and stroke.Parent then
			stroke.Color = c
		end
	end
end)

-- Fancy thank-you notice
local notice = new(gui, "Frame", {Size = UDim2.new(0.6,0,0.09,0), Position = UDim2.new(0.2,0,-0.12,0), BackgroundTransparency = 0.04})
addCorner(notice, 14); local sN = addStroke(notice); table.insert(rainbowTargets, sN); addGradient(notice, Color3.fromRGB(0,150,255), Color3.fromRGB(0,220,200))
local lbl = new(notice, "TextLabel", {Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, Text = "‚ú® C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng APEX HUB ‚ú®", TextScaled = true, Font = Enum.Font.GothamBold, TextColor3 = Color3.fromRGB(255,255,255)})
TweenService:Create(notice, TweenInfo.new(0.8), {Position = UDim2.new(0.2,0,0.06,0)}):Play()
task.delay(3.2, function() TweenService:Create(notice, TweenInfo.new(0.8), {Position = UDim2.new(0.2,0,-0.12,0)}):Play(); task.wait(1); notice:Destroy() end)

-- KEY PANEL (draggable)
local keyFrame = new(gui, "Frame", {Size = UDim2.new(0.44,0,0.44,0), Position = UDim2.new(0.28,0,0.28,0), BackgroundTransparency = 0.05, Active = true, Draggable = true})
addCorner(keyFrame, 14); local ks = addStroke(keyFrame); table.insert(rainbowTargets, ks); addGradient(keyFrame, Color3.fromRGB(60,60,200), Color3.fromRGB(10,160,190))
local title = new(keyFrame, "TextLabel", {Size = UDim2.new(1,0,0.15,0), Position = UDim2.new(0,0,0.03,0), BackgroundTransparency = 1, Text = "üîê Nh·∫≠p Key ƒë·ªÉ m·ªü APEX HUB", TextScaled = true, Font = Enum.Font.GothamBold, TextColor3 = Color3.fromRGB(255,255,255)})
local hint = new(keyFrame, "TextLabel", {Size = UDim2.new(0.9,0,0.06,0), Position = UDim2.new(0.05,0,0.18,0), BackgroundTransparency = 1, Text = "M·ªói key h·ª£p l·ªá 24 gi·ªù. B·∫•m Get Key ƒë·ªÉ l·∫•y link.", TextScaled = true, Font = Enum.Font.Gotham, TextColor3 = Color3.fromRGB(230,230,230)})

local inputBox = new(keyFrame, "TextBox", {Size = UDim2.new(0.84,0,0.16,0), Position = UDim2.new(0.08,0,0.32,0), PlaceholderText = "Nh·∫≠p key...", TextScaled = true, Font = Enum.Font.Gotham}); addCorner(inputBox,9); inputBox.BackgroundColor3 = Color3.fromRGB(45,45,45); inputBox.TextColor3 = Color3.fromRGB(255,255,255)
local confirmBtn = new(keyFrame, "TextButton", {Size = UDim2.new(0.36,0,0.18,0), Position = UDim2.new(0.08,0,0.56,0), Text = "‚úÖ X√°c nh·∫≠n", TextScaled = true, Font = Enum.Font.GothamBold, BackgroundColor3 = Color3.fromRGB(38,170,95), TextColor3 = Color3.fromRGB(255,255,255)}); addCorner(confirmBtn,9)
local getBtn = new(keyFrame, "TextButton", {Size = UDim2.new(0.36,0,0.18,0), Position = UDim2.new(0.56,0,0.56,0), Text = "üåê Get Key", TextScaled = true, Font = Enum.Font.GothamBold, BackgroundColor3 = Color3.fromRGB(60,130,240), TextColor3 = Color3.fromRGB(255,255,255)}); addCorner(getBtn,9)
local statusLabel = new(keyFrame, "TextLabel", {Size = UDim2.new(1,0,0.12,0), Position = UDim2.new(0,0,0.78,0), BackgroundTransparency = 1, Text = "", TextScaled = true, Font = Enum.Font.Gotham})

-- SMALL TOGGLE (hide/show)
local smallToggle = new(gui, "TextButton", {Size = UDim2.new(0,0,0,0)}); -- will be replaced later

-- MAIN HUB (draggable)
local mainFrame = new(gui, "Frame", {Size = UDim2.new(0.26,0,0.34,0), Position = UDim2.new(0.68,0,0.58,0), BackgroundTransparency = 0.04, Active = true, Draggable = true})
addCorner(mainFrame, 12); local ms = addStroke(mainFrame); table.insert(rainbowTargets, ms); addGradient(mainFrame, Color3.fromRGB(0,200,200), Color3.fromRGB(0,120,180))
local titleMain = new(mainFrame, "TextLabel", {Size = UDim2.new(1,0,0.14,0), Position = UDim2.new(0,0,0.03,0), BackgroundTransparency = 1, Text = "APEX HUB", TextScaled = true, Font = Enum.Font.GothamBold})
local liftBtn = new(mainFrame, "TextButton", {Size = UDim2.new(0.84,0,0.22,0), Position = UDim2.new(0.08,0,0.22,0), Text = "‚¨ÜÔ∏è N√¢ng", TextScaled = true, Font = Enum.Font.GothamBold, BackgroundColor3 = Color3.fromRGB(200,60,60), TextColor3 = Color3.fromRGB(255,255,255)}); addCorner(liftBtn,10)
local flyBtn = new(mainFrame, "TextButton", {Size = UDim2.new(0.84,0,0.22,0), Position = UDim2.new(0.08,0,0.56,0), Text = "üåå ƒêi Tr√™n Kh√¥ng", TextScaled = true, Font = Enum.Font.GothamBold, BackgroundColor3 = Color3.fromRGB(200,60,60), TextColor3 = Color3.fromRGB(255,255,255)}); addCorner(flyBtn,10)

-- small toggle visible button (top-left)
smallToggle = new(gui, "TextButton", {Size = UDim2.new(0,48,0,48), Position = UDim2.new(0, 12, 0, 12), Text = "‚ò∞", TextScaled = true, BackgroundTransparency = 0.12}); addCorner(smallToggle,10); local st = addStroke(smallToggle); table.insert(rainbowTargets, st)

-- initial visibility depends on server
local function askServerStatus()
	local ok, res = pcall(function() return rfGetStatus:InvokeServer() end)
	if ok and res == true then
		return true
	end
	return false
end

local hasKey = askServerStatus()
keyFrame.Visible = not hasKey
mainFrame.Visible = hasKey

-- Toggle small button: if keyFrame visible hide it, else toggle mainFrame
smallToggle.MouseButton1Click:Connect(function()
	if keyFrame.Visible then
		keyFrame.Visible = false
	else
		mainFrame.Visible = not mainFrame.Visible
	end
end)

-- Get Key btn: ask server for LINKS + index then copy correct link
getBtn.MouseButton1Click:Connect(function()
	local ok, result = pcall(function() return rfGetLinks:InvokeServer() end)
	if ok and type(result) == "table" then
		-- result expected: LINKS, idx (but RemoteFunction returns multiple values packed as table in some contexts)
		local links = result[1]
		local idx = result[2]
		if type(links) == "table" and type(idx) == "number" then
			local link = links[idx] or links[1]
			pcall(function() setclipboard(link) end)
			statusLabel.Text = "Link ƒë√£ copy v√†o clipboard!"
		else
			-- fallback: server may have returned table only
			if type(result) == "table" then
				pcall(function() setclipboard(result[1]) end)
				statusLabel.Text = "Link ƒë√£ copy (fallback)!"
			else
				statusLabel.Text = "Kh√¥ng l·∫•y ƒë∆∞·ª£c link."
			end
		end
	else
		statusLabel.Text = "L·ªói l·∫•y link."
	end
end)

-- Confirm key: send to server
confirmBtn.MouseButton1Click:Connect(function()
	local txt = tostring(inputBox.Text or ""):gsub("^%s*(.-)%s*$","%1")
	if txt == "" then statusLabel.Text = "Nh·∫≠p key ƒë√£!" return end
	local ok, a, b = pcall(function() return rfSubmitKey:InvokeServer(txt) end)
	-- On success rfSubmitKey returns (true, "X√°c th·ª±c th√†nh c√¥ng!")
	if ok and a == true then
		statusLabel.Text = "‚úîÔ∏è Th√†nh c√¥ng!"
		task.wait(0.6)
		keyFrame.Visible = false
		mainFrame.Visible = true
	else
		local errMsg = tostring(b or a or "Sai key!")
		statusLabel.Text = errMsg
	end
end)

-- LIFT feature: speed = 12
local liftOn = false
local liftPart = nil
local liftConn = nil
local liftOffset = 0
local liftSpeed = 12
liftBtn.MouseButton1Click:Connect(function()
	liftOn = not liftOn
	if liftOn then
		liftBtn.Text = "‚¨ÜÔ∏è N√¢ng (ON)"
		liftBtn.BackgroundColor3 = Color3.fromRGB(50,200,50)
		local char = player.Character or player.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		liftPart = Instance.new("Part")
		liftPart.Size = Vector3.new(6,1,6)
		liftPart.Anchored = true
		liftPart.CanCollide = true
		liftPart.Transparency = 0.2
		liftPart.Color = Color3.fromRGB(60,200,80)
		liftPart.Name = "APEX_Lift"
		liftPart.Parent = workspace
		liftOffset = 0
		liftConn = RunService.RenderStepped:Connect(function(dt)
			if not liftOn or not liftPart or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
			local hrpPos = player.Character.HumanoidRootPart.Position
			liftOffset = liftOffset + (liftSpeed * dt)
			local target = hrpPos - Vector3.new(0,3,0) + Vector3.new(0, liftOffset, 0)
			liftPart.CFrame = CFrame.new(target)
		end)
	else
		liftBtn.Text = "‚¨ÜÔ∏è N√¢ng"
		liftBtn.BackgroundColor3 = Color3.fromRGB(200,60,60)
		if liftConn then liftConn:Disconnect(); liftConn = nil end
		if liftPart then liftPart:Destroy(); liftPart = nil end
		liftOffset = 0
	end
end)

-- FLY feature: part appears under feet and moves up/down (1s up/1s down)
local flyOn = false
local flyPart = nil
local flyConn = nil
local flyTimer = 0
local flyAmplitude = 2
flyBtn.MouseButton1Click:Connect(function()
	flyOn = not flyOn
	if flyOn then
		flyBtn.Text = "üåå ƒêi Tr√™n Kh√¥ng (ON)"
		flyBtn.BackgroundColor3 = Color3.fromRGB(50,200,50)
		local char = player.Character or player.CharacterAdded:Wait()
		local hrp = char:WaitForChild("HumanoidRootPart")
		flyPart = Instance.new("Part")
		flyPart.Size = Vector3.new(8,1,8)
		flyPart.Anchored = true
		flyPart.CanCollide = true
		flyPart.Transparency = 0.25
		flyPart.Color = Color3.fromRGB(70,130,255)
		flyPart.Name = "APEX_FlyPlatform"
		flyPart.Parent = workspace
		flyTimer = 0
		flyConn = RunService.RenderStepped:Connect(function(dt)
			if not flyOn or not flyPart or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
			flyTimer = flyTimer + dt
			local hrpPos = player.Character.HumanoidRootPart.Position
			local offsetY = math.sin(flyTimer * math.pi) * flyAmplitude -- period 2s -> 1s up, 1s down
			local target = hrpPos - Vector3.new(0,3,0) + Vector3.new(0, offsetY, 0)
			flyPart.CFrame = CFrame.new(target)
		end)
	else
		flyBtn.Text = "üåå ƒêi Tr√™n Kh√¥ng"
		flyBtn.BackgroundColor3 = Color3.fromRGB(200,60,60)
		if flyConn then flyConn:Disconnect(); flyConn = nil end
		if flyPart then flyPart:Destroy(); flyPart = nil end
		flyTimer = 0
	end
end)

-- Re-check when character added
player.CharacterAdded:Connect(function() task.wait(0.8); local ok,res = pcall(function() return rfGetStatus:InvokeServer() end); if ok and res==true then keyFrame.Visible=false; mainFrame.Visible=true else keyFrame.Visible=true; mainFrame.Visible=false end end)
]]

-- inject LINKS and KEYS JSON into client template
local linksJson = HttpService:JSONEncode(LINKS)
local keysJson = HttpService:JSONEncode(ROTATING_KEYS)
local injectedClient = clientTemplate:gsub("__LINKS_JSON__", linksJson):gsub("__KEYS_JSON__", keysJson)

-- Create/replace LocalScript in ReplicatedStorage
local existing = ReplicatedStorage:FindFirstChild("APEX_Client")
if existing then existing:Destroy() end
local clientLS = Instance.new("LocalScript")
clientLS.Name = "APEX_Client"
clientLS.Source = injectedClient
clientLS.Parent = ReplicatedStorage

-- When player added: clone LocalScript into PlayerGui (so it runs client-side)
Players.PlayerAdded:Connect(function(plr)
	-- Wait for PlayerGui to exist (CharacterAppearanceLoaded ensures PlayerGui)
	plr.CharacterAppearanceLoaded:Wait()
	local rep = ReplicatedStorage:FindFirstChild("APEX_Client")
	if rep then
		local clone = rep:Clone()
		clone.Parent = plr:WaitForChild("PlayerGui")
	end
end)

-- For players already in server (studio)
for _, plr in ipairs(Players:GetPlayers()) do
	if plr.Character then
		local rep = ReplicatedStorage:FindFirstChild("APEX_Client")
		if rep then
			local clone = rep:Clone()
			clone.Parent = plr:WaitForChild("PlayerGui")
		end
	end
end

print("[APEX_Loader] Ready. Edit LINKS at top to your 12 get-key URLs.")
